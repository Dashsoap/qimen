# 丁未奇门遁甲系统 - Cursor Rules 导航 (2024优化版)

## 📋 规则文件概览

本项目包含完整的Cursor Rules文档，帮助开发者快速理解和维护优化后的丁未奇门遁甲系统。

### 🏗️ 项目架构规则 (已优化)
[project-architecture.mdc](mdc:.cursor/rules/project-architecture.mdc)
- **核心内容**: 全新的apps/目录分离架构设计
- **关键信息**: 模块化目录结构、双前端支持、统一启动脚本
- **重要更新**: 采用 [apps/backend/app.js](mdc:apps/backend/app.js) 统一入口
- **新特性**: Vue + React双前端并存，配置文件集中管理

### 🌐 API接口规则 (功能增强)
[api-endpoints.mdc](mdc:.cursor/rules/api-endpoints.mdc)
- **核心内容**: 完整的RESTful API文档 (2024优化版)
- **包含内容**: 认证、积分、签到、奇门遁甲、AI分析、历史记录、收藏夹
- **新增功能**: 历史记录系统、收藏夹管理、邀请码系统
- **实用信息**: 请求格式、响应示例、认证方式、限流策略

### 🎨 前端配置规则 (双前端版)
[frontend-config.mdc](mdc:.cursor/rules/frontend-config.mdc)
- **核心内容**: Vue 3 + React 18 双前端配置
- **Vue技术栈**: Vue 3、Pinia、Vite、Capacitor 7.x
- **React技术栈**: React 18、Redux Toolkit、Vite、Capacitor 6.x
- **配置重点**: 双前端API代理、移动端支持、环境检测

### 🚀 部署指南规则 (全面更新)
[deployment-guide.mdc](mdc:.cursor/rules/deployment-guide.mdc)
- **核心内容**: 完整的部署和运维指南 (2024优化版)
- **包含内容**: 统一启动脚本、生产部署、双前端构建、移动端发布
- **新增工具**: [start-dev.sh](mdc:start-dev.sh) 开发环境快速启动
- **部署方式**: 标准部署脚本位于 [config/](mdc:config) 目录

### 🎯 重构成果总结 (项目优化)
[refactoring-summary.mdc](mdc:.cursor/rules/refactoring-summary.mdc)
- **核心内容**: 2024年项目结构优化记录
- **重构成果**: 清理废弃目录、模块化分离、配置集中管理
- **迁移指南**: 新目录结构适配、开发工作流调整

## 🚀 快速开始指南

### 🔰 第一次接触项目？
1. **了解架构**: 阅读 [project-architecture.mdc](mdc:.cursor/rules/project-architecture.mdc) 了解新的apps/架构
2. **快速启动**: 使用 `./start-dev.sh start` 一键启动开发环境
3. **学习API**: 查看 [api-endpoints.mdc](mdc:.cursor/rules/api-endpoints.mdc) 了解接口规范
4. **选择前端**: Vue版本 (apps/frontend-vue) 或 React版本 (apps/frontend-react)

### 🛠️ 需要开发新功能？
1. **架构理解**: 掌握 [apps/backend/src/](mdc:apps/backend/src) 的模块化架构
2. **参考模块**: 查看现有服务模块在 [apps/backend/src/services/](mdc:apps/backend/src/services) 目录
3. **接口规范**: 使用 [api-endpoints.mdc](mdc:.cursor/rules/api-endpoints.mdc) 中的接口标准
4. **路由添加**: 在 [apps/backend/src/routes/](mdc:apps/backend/src/routes) 中添加新路由

### 🎨 前端开发指南
1. **选择技术栈**:
   - Vue版本: [apps/frontend-vue/](mdc:apps/frontend-vue) - 生产就绪，完整功能
   - React版本: [apps/frontend-react/](mdc:apps/frontend-react) - 完整迁移，现代化
2. **配置理解**: 查看 [frontend-config.mdc](mdc:.cursor/rules/frontend-config.mdc) 了解双前端配置
3. **API集成**: Vue使用Pinia，React使用Redux Toolkit
4. **移动端构建**: 支持iOS和Android原生应用

### 📱 移动端开发
1. **Vue移动端**: `cd apps/frontend-vue && npm run build:mobile`
2. **React移动端**: `cd apps/frontend-react && npm run build:mobile`
3. **平台支持**: iOS (Xcode) + Android (Android Studio)
4. **包名配置**: Vue版本和React版本使用不同包名

### 🌐 部署和运维
1. **开发环境**: `./start-dev.sh start` 交互式启动
2. **生产部署**: `./config/deploy.sh` 标准部署
3. **故障排除**: 查看 [deployment-guide.mdc](mdc:.cursor/rules/deployment-guide.mdc)
4. **监控管理**: PM2进程管理、日志监控

## ⚠️ 重要提醒 - 2024年架构更新

### 🔥 项目结构变化
- **新架构**: 所有应用移至 `apps/` 目录
- **后端统一**: 只使用 [apps/backend/app.js](mdc:apps/backend/app.js) 作为入口
- **双前端**: Vue和React版本并存，可独立维护
- **配置集中**: 所有配置文件移至 [config/](mdc:config) 目录
- **文档整理**: 所有文档移至 [docs/](mdc:docs) 目录

### ✅ 已清理的废弃内容
- ❌ `backend-nestjs/` - 空的NestJS目录
- ❌ `enterprise-backend/` - 空的企业后端目录
- ❌ `pages/` - 空的页面目录
- ❌ `components/` - 空的组件目录
- ❌ `prisma/` - 废弃的数据库配置（使用apps/backend/prisma/）
- ❌ `qimen-apk/` - 旧的APK构建目录

### 🚀 新增功能特性
- ✅ **统一启动脚本**: [start-dev.sh](mdc:start-dev.sh) 支持6种启动模式
- ✅ **历史记录系统**: 自动保存AI分析记录，支持搜索和管理
- ✅ **收藏夹功能**: 重要分析收藏管理，支持备注编辑
- ✅ **邀请码系统**: 用户注册邀请码控制
- ✅ **移动端优化**: 双前端都支持iOS和Android

### 📊 系统状态概览
- **架构状态**: ✅ 完全优化，零重复代码
- **前端支持**: ✅ Vue + React 双版本生产就绪
- **移动端**: ✅ iOS + Android 双平台支持
- **部署配置**: ✅ 标准化部署流程
- **文档完善**: ✅ 结构清晰，规范完整

## 🎯 开发工作流建议

### 日常开发流程
```bash
# 1. 启动开发环境
./start-dev.sh start

# 2. 选择开发模式
# - 后端开发: 选择模式1 (只启动后端)
# - Vue前端开发: 选择模式2 (后端 + Vue前端) 
# - React前端开发: 选择模式3 (后端 + React前端)
# - 全栈开发: 选择模式4 (完整启动)

# 3. 开发完成后提交
git add .
git commit -m "feature: 新功能描述"
git push
```

### 新功能开发步骤
1. **后端开发**:
   - 在 [apps/backend/src/services/](mdc:apps/backend/src/services) 添加业务逻辑
   - 在 [apps/backend/src/routes/](mdc:apps/backend/src/routes) 添加路由
   - 更新 [api-endpoints.mdc](mdc:.cursor/rules/api-endpoints.mdc) 文档

2. **前端开发** (选择Vue或React):
   - Vue: 在 [apps/frontend-vue/src/](mdc:apps/frontend-vue/src) 开发
   - React: 在 [apps/frontend-react/src/](mdc:apps/frontend-react/src) 开发
   - 更新相应的状态管理和API调用

3. **测试部署**:
   - 本地测试: `./start-dev.sh start`
   - 生产部署: `./config/deploy.sh`

## 📚 文档维护

### 当项目有重要变更时，请同步更新：
- [docs/PROJECT_STRUCTURE.md](mdc:docs/PROJECT_STRUCTURE.md) - 项目结构文档
- [docs/README.md](mdc:docs/README.md) - 项目说明文档
- 相关的 .cursor/rules/ 配置文件
- API接口文档和前端配置说明

### 版本说明
- **当前版本**: 2024优化版
- **主要特性**: 模块化架构、双前端支持、统一启动
- **兼容性**: 完全兼容现有功能，增强开发体验

---

## 🏆 项目现状总结

**🎯 架构优势**:
- 清晰的模块分离架构
- 双前端技术栈支持
- 统一的开发工作流
- 完善的文档体系

**🚀 技术特色**:
- Node.js + Express 后端
- Vue 3 + React 18 双前端
- 移动端原生应用支持
- AI智能分析集成

**📱 功能完整**:
- 奇门遁甲排盘算法
- AI智能分析系统  
- 用户认证和积分管理
- 历史记录和收藏夹
- 移动端跨平台支持

**🔧 开发友好**:
- 一键启动开发环境
- 标准化部署流程
- 完整的API文档
- 清晰的代码组织

---

*🔮 传承千年智慧，拥抱现代架构 - 丁未奇门遁甲系统 2024优化版*

- 🔧 **便捷部署**: 完整的部署和运维指南
- 🎯 **避免陷阱**: 重构历史和迁移指南

**记住：现在只有一个服务器入口点 [app.js](mdc:backend/app.js)，享受零代码重复的开发体验！**
