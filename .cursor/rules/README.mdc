---
description:
globs:
alwaysApply: false
---
# 奇门遁甲AI系统 - Cursor Rules 导航

## 📋 规则文件概览

本项目包含完整的Cursor Rules文档，帮助开发者快速理解和维护奇门遁甲AI系统。

### 🏗️ 项目架构规则
[project-architecture.mdc](mdc:.cursor/rules/project-architecture.mdc)
- **核心内容**: 统一的app.js架构设计
- **关键信息**: 模块化目录结构、启动方式、安全特性
- **重要提醒**: 已删除重复文件，只使用[app.js](mdc:backend/app.js)

### 🌐 API接口规则
[api-endpoints.mdc](mdc:.cursor/rules/api-endpoints.mdc)
- **核心内容**: 完整的RESTful API文档
- **包含内容**: 认证、积分、签到、奇门遁甲、AI分析接口
- **实用信息**: 请求格式、响应示例、认证方式、限流策略

### 🎨 前端配置规则
[frontend-config.mdc](mdc:.cursor/rules/frontend-config.mdc)
- **核心内容**: Vue 3 + Vite前端配置
- **技术栈**: Ant Design Vue、Pinia、Vue Router、Axios
- **配置重点**: API代理、移动端支持、环境检测

### 🚀 部署指南规则
[deployment-guide.mdc](mdc:.cursor/rules/deployment-guide.mdc)
- **核心内容**: 完整的部署和运维指南
- **包含内容**: 启动方式、生产部署、监控日志、故障排除
- **实用工具**: 启动脚本、进程管理、健康检查

### 🎯 重构成果总结
[refactoring-summary.mdc](mdc:.cursor/rules/refactoring-summary.mdc)
- **核心内容**: 代码重构的完整记录
- **重构成果**: 消除70%代码重复、统一架构、性能优化
- **迁移指南**: 开发习惯调整、重要提醒

## 🚀 快速开始指南

### 第一次接触项目？
1. 先阅读 [project-architecture.mdc](mdc:.cursor/rules/project-architecture.mdc) 了解系统架构
2. 查看 [api-endpoints.mdc](mdc:.cursor/rules/api-endpoints.mdc) 了解API接口
3. 参考 [deployment-guide.mdc](mdc:.cursor/rules/deployment-guide.mdc) 启动服务

### 需要开发新功能？
1. 了解 [project-architecture.mdc](mdc:.cursor/rules/project-architecture.mdc) 中的模块化架构
2. 参考现有的服务模块在 [src/services/](mdc:backend/src/services) 目录
3. 使用 [api-endpoints.mdc](mdc:.cursor/rules/api-endpoints.mdc) 中的接口规范

### 前端开发？
1. 查看 [frontend-config.mdc](mdc:.cursor/rules/frontend-config.mdc) 了解技术栈
2. 配置API代理和环境变量
3. 参考现有页面组件结构

### 遇到问题？
1. 查看 [deployment-guide.mdc](mdc:.cursor/rules/deployment-guide.mdc) 的故障排除章节
2. 检查 [refactoring-summary.mdc](mdc:.cursor/rules/refactoring-summary.mdc) 中的迁移指南
3. 确认使用的是 [app.js](mdc:backend/app.js) 而不是已删除的文件

## ⚠️ 重要提醒

### 🔥 已删除的文件（不要使用）
- ❌ `backend/server.js` - 已删除
- ❌ `backend/index.js` - 已删除  
- ❌ `backend/simple-server.js` - 已删除

### ✅ 统一入口点
- ✅ [backend/app.js](mdc:backend/app.js) - 唯一服务器文件
- ✅ 开发和生产环境都使用相同文件
- ✅ 模块化架构，零代码重复

### 🚀 快速启动
```bash
# 后端
cd backend && node app.js

# 前端  
cd frontend && npm run dev

# 一键启动
./start-all.sh
```

## 📊 系统状态

### ✅ 重构完成状态
- **代码重复**: 已消除（从70%降至0%）
- **架构统一**: 单一入口点 + 模块化设计
- **部署明确**: 所有环境使用app.js
- **功能完整**: 所有接口验证通过
- **性能优化**: 启动时间、内存使用、响应时间全面优化

### 🎯 核心功能
- 🔐 用户认证系统 (JWT + bcrypt)
- 💰 积分管理系统 (事务安全)
- 📅 签到系统 (每日奖励)
- 🔮 奇门遁甲排盘 (传统算法)
- 🤖 AI智能分析 (多策略)
- 🛡️ 安全防护 (限流+验证)

## 📝 开发规范

### 代码组织
- 新功能模块化开发在 [src/](mdc:backend/src) 目录
- 路由文件放在 [src/routes/](mdc:backend/src/routes)
- 服务逻辑放在 [src/services/](mdc:backend/src/services)
- 中间件放在 [src/middleware/](mdc:backend/src/middleware)

### 配置管理
- 开发环境: [config.env](mdc:backend/config.env)
- 生产环境: [config.prod.env](mdc:backend/config.prod.env)
- 前端API配置: [frontend/src/utils/api.js](mdc:frontend/src/utils/api.js)

### Git提交规范
```
refactor: refactor error handling for network requests

Changes:
- Unify error handling logic across all network requests
- Extract common error codes into shared constants
- Optimize error message display mechanism
```

## 🎉 总结

这套Cursor Rules为奇门遁甲AI系统提供了完整的开发指南，涵盖了从架构设计到部署运维的各个方面。通过遵循这些规则，开发者可以：

- 🚀 **快速上手**: 清晰的架构和接口文档
- 🛠️ **高效开发**: 模块化设计和开发规范
- 🔧 **便捷部署**: 完整的部署和运维指南
- 🎯 **避免陷阱**: 重构历史和迁移指南

**记住：现在只有一个服务器入口点 [app.js](mdc:backend/app.js)，享受零代码重复的开发体验！**
