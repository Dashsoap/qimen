# 丁未奇门遁甲系统 - 部署指南 (2024优化版)

## 🚀 快速启动

### 开发环境（本地） - 推荐方式
```bash
# 使用统一启动脚本
./start-dev.sh install    # 安装所有依赖
./start-dev.sh start      # 交互式启动选择

# 选择启动模式:
# 1) 只启动后端 (端口3001)
# 2) 后端 + Vue前端 (端口3001 + 5173)
# 3) 后端 + React前端 (端口3001 + 5174)
# 4) 完整启动 (后端 + 两个前端)
# 5) 只启动Vue前端
# 6) 只启动React前端
```

### 手动启动方式
```bash
# 1. 启动后端
cd apps/backend
node app.js

# 2. 启动Vue前端（新终端）
cd apps/frontend-vue
npm run dev
# 访问: http://localhost:5173

# 3. 启动React前端（新终端）
cd apps/frontend-react
npm run dev
# 访问: http://localhost:5174
```

## 🔧 后端部署方式

### 方式一：直接启动 [apps/backend/app.js](mdc:apps/backend/app.js)
```bash
cd apps/backend
node app.js                         # 开发环境
NODE_ENV=production node app.js     # 生产环境
```

### 方式二：使用后端启动脚本
```bash
# 注意：这些脚本仍在后端目录内
cd apps/backend

./start.sh                          # 简单启动
./start-server.sh                   # 守护进程模式
./start-auth-server.sh              # 带环境检查的启动
```

### 方式三：PM2管理（生产推荐）
```bash
cd apps/backend
pm2 start app.js --name "qimen-ai"
pm2 logs qimen-ai
pm2 restart qimen-ai
pm2 stop qimen-ai
```

## 🎨 前端部署方式

### Vue前端部署
```bash
cd apps/frontend-vue

# 开发模式
npm run dev                         # http://localhost:5173

# 生产构建
npm run build                       # 构建到 dist/ 目录
npm run preview                     # 预览构建结果

# 移动端构建
npm run build:mobile                # 移动端专用构建
npx cap sync                        # 同步到移动端
```

### React前端部署
```bash
cd apps/frontend-react

# 开发模式
npm run dev                         # http://localhost:5174

# 生产构建  
npm run build                       # 构建到 dist/ 目录
npm run preview                     # 预览构建结果

# 移动端构建
npm run build:mobile                # 使用移动端配置构建
npx cap sync                        # 同步到移动端
```

## 🌐 生产环境部署

### 标准部署流程
```bash
# 使用配置目录中的部署脚本
./config/deploy.sh                  # 标准部署脚本
./config/deploy-fix.sh              # 修复版部署脚本（如遇兼容性问题）
```

### 手动生产部署
```bash
# 1. 上传代码到服务器
rsync -avz ./apps/backend/ root@101.201.148.8:/home/qimen-backend/
rsync -avz ./apps/frontend-vue/dist/ root@101.201.148.8:/home/qimen-frontend/vue/
rsync -avz ./apps/frontend-react/dist/ root@101.201.148.8:/home/qimen-frontend/react/

# 2. 登录服务器
ssh root@101.201.148.8

# 3. 后端部署
cd /home/qimen-backend
npm install --production
npx prisma generate
npx prisma db push
pm2 start app.js --name "qimen-backend"

# 4. 配置Nginx
# 参考下方Nginx配置示例
```

### Docker部署
```bash
# 使用项目根目录的Docker配置
docker-compose -f config/docker-compose.yml up -d
```

## ⚙️ 环境配置

### 后端环境变量
```bash
# apps/backend/.env (或 config.env)
DATABASE_URL="file:./data/dev.db"
JWT_SECRET="your-jwt-secret-key"
PORT=3001
NODE_ENV=development

# 生产环境
NODE_ENV=production
DATABASE_URL="file:./data/prod.db"
AI_API_KEY="your-ai-api-key"
```

### Vue前端环境变量
```bash
# apps/frontend-vue/.env
VITE_API_BASE_URL=http://localhost:3001
VITE_APP_TITLE=丁未奇门遁甲

# apps/frontend-vue/.env.production
VITE_API_BASE_URL=http://101.201.148.8:3001
VITE_APP_TITLE=丁未奇门遁甲
```

### React前端环境变量
```bash
# apps/frontend-react/.env
VITE_API_BASE_URL=http://localhost:3001
VITE_FORCE_MOBILE_API=false

# apps/frontend-react/.env.production
VITE_API_BASE_URL=http://101.201.148.8:3001
VITE_FORCE_MOBILE_API=true
VITE_BUILD_TARGET=mobile
```

## 🌍 Nginx配置

### 完整Nginx配置示例
```nginx
server {
    listen 80;
    server_name qimen.example.com;

    # 后端API代理
    location /api {
        proxy_pass http://localhost:3001;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
    }

    # Vue前端
    location /vue {
        alias /home/qimen-frontend/vue;
        try_files $uri $uri/ /vue/index.html;
        
        # 静态资源缓存
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
        }
    }

    # React前端
    location /react {
        alias /home/qimen-frontend/react;
        try_files $uri $uri/ /react/index.html;
        
        # 静态资源缓存
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
        }
    }

    # 默认重定向到Vue版本
    location / {
        return 301 /vue/;
    }

    # 健康检查
    location /health {
        proxy_pass http://localhost:3001/health;
    }
}
```

## 📱 移动端部署

### Vue前端移动端
```bash
cd apps/frontend-vue

# iOS部署
npm run build:mobile
npx cap sync ios
npx cap open ios                    # 在Xcode中构建和发布

# Android部署
npm run build:mobile
npx cap sync android
npx cap open android                # 在Android Studio中构建和发布
```

### React前端移动端
```bash
cd apps/frontend-react

# 移动端构建
npm run build:mobile                # 使用移动端专用配置

# iOS部署
npx cap sync ios
npx cap open ios

# Android部署
npx cap sync android
npx cap open android
```

### 移动端配置要点
- Vue前端使用Capacitor 7.x，包名：`com.guiguqimen.app.1750352961`
- React前端使用Capacitor 6.x，包名：`com.guiguqimen.react.app`
- 移动端自动使用服务器API地址，无需手动配置

## 🔍 服务监控

### PM2进程管理
```bash
# 查看所有进程
pm2 list

# 查看日志
pm2 logs qimen-backend

# 重启服务
pm2 restart qimen-backend

# 查看进程详情
pm2 show qimen-backend

# 监控面板
pm2 monit
```

### 健康检查
```bash
# 后端健康检查
curl http://localhost:3001/health

# 检查数据库连接
curl http://localhost:3001/api/health/db

# 检查AI服务
curl http://localhost:3001/api/health/ai
```

## 🚨 故障排除

### 常见问题及解决方案

#### 1. 后端启动失败
```bash
# 检查端口占用
lsof -i :3001

# 检查数据库文件权限
ls -la apps/backend/data/

# 查看详细错误日志
cd apps/backend && NODE_ENV=development node app.js
```

#### 2. 前端构建失败
```bash
# 清理依赖重装
cd apps/frontend-vue
rm -rf node_modules package-lock.json
npm install

# 检查Node版本（推荐18+）
node --version
npm --version
```

#### 3. API调用失败
```bash
# 检查Nginx代理配置
nginx -t
systemctl reload nginx

# 检查后端API是否正常
curl -I http://localhost:3001/api/health
```

#### 4. 移动端构建问题
```bash
# 重新同步Capacitor
cd apps/frontend-vue
npx cap sync
npx cap doctor                      # 检查环境配置

# 清理Capacitor缓存
npx cap clean
```

## 📊 性能优化

### 后端优化
- 使用PM2集群模式：`pm2 start app.js -i max`
- 启用数据库连接池
- 配置Redis缓存（可选）
- 使用Nginx负载均衡

### 前端优化
- 启用Gzip压缩：`gzip on;` in Nginx
- 配置CDN加速静态资源
- 启用浏览器缓存
- 使用Webpack Bundle Analyzer分析包大小

### 数据库优化
```bash
# SQLite性能优化
cd apps/backend
sqlite3 data/prod.db "PRAGMA optimize;"
sqlite3 data/prod.db "VACUUM;"
```

## 🔐 安全配置

### SSL证书配置
```nginx
server {
    listen 443 ssl http2;
    ssl_certificate /path/to/certificate.crt;
    ssl_certificate_key /path/to/private.key;
    
    # SSL安全配置
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers HIGH:!aNULL:!MD5;
}
```

### 防火墙配置
```bash
# 只开放必要端口
ufw allow 22                        # SSH
ufw allow 80                        # HTTP
ufw allow 443                       # HTTPS
ufw deny 3001                       # 禁止直接访问后端端口
ufw enable
```

## 📝 部署清单

### 部署前检查
- [ ] 代码已提交到Git
- [ ] 环境变量已配置
- [ ] 数据库迁移已完成
- [ ] SSL证书已安装
- [ ] 域名DNS已解析

### 部署后验证
- [ ] 后端API可正常访问
- [ ] Vue前端页面正常显示
- [ ] React前端页面正常显示
- [ ] 用户注册登录功能正常
- [ ] 奇门遁甲排盘功能正常
- [ ] AI分析功能正常
- [ ] 移动端应用正常运行

---

## 🎯 快速命令参考

```bash
# 开发环境
./start-dev.sh start

# 生产部署
./config/deploy.sh

# 后端管理
cd apps/backend && pm2 restart app.js

# 前端构建
cd apps/frontend-vue && npm run build
cd apps/frontend-react && npm run build

# 移动端构建
cd apps/frontend-vue && npm run build:mobile
cd apps/frontend-react && npm run build:mobile
```


- **文档**: 查看 [README.md](mdc:backend/README.md) 和 [AUTH_SYSTEM_README.md](mdc:backend/AUTH_SYSTEM_README.md)
- **日志**: 查看相应的日志文件进行问题诊断
- **监控**: 使用健康检查接口监控服务状态
