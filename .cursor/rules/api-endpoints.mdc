# 丁未奇门遁甲系统 - API接口规则 (2024优化版)

## 🌐 API端点总览

系统提供完整的RESTful API，所有接口通过 [apps/backend/app.js](mdc:apps/backend/app.js) 统一处理。

### 🔗 基础URL
- **开发环境**: `http://localhost:3001`
- **生产环境**: `http://101.201.148.8:3001`
- **Vue前端代理**: `http://localhost:5173/api` (通过Vite代理)
- **React前端代理**: `http://localhost:5174/api` (通过Vite代理)

### 🏗️ API架构说明
- **统一入口**: 所有API请求通过 [apps/backend/app.js](mdc:apps/backend/app.js) 处理
- **模块化路由**: 路由模块位于 [apps/backend/src/routes/](mdc:apps/backend/src/routes/) 目录
- **中间件**: 认证和限流通过 [apps/backend/src/middleware/](mdc:apps/backend/src/middleware/) 统一管理
- **服务层**: 业务逻辑在 [apps/backend/src/services/](mdc:apps/backend/src/services/) 中实现

## 🔐 认证系统接口

### 用户注册
```http
POST /api/auth/register
Content-Type: application/json

{
  "username": "testuser",
  "email": "test@example.com",
  "password": "123456",
  "phone": "13800138000",     // 可选
  "inviteCode": "INVITE123"   // 可选，邀请码注册
}
```

**响应示例**:
```json
{
  "success": true,
  "message": "注册成功",
  "data": {
    "user": {
      "id": "user_123",
      "username": "testuser",
      "email": "test@example.com"
    },
    "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
  }
}
```

### 用户登录
```http
POST /api/auth/login
Content-Type: application/json

{
  "usernameOrEmail": "testuser",
  "password": "123456"
}
```

**响应示例**:
```json
{
  "success": true,
  "message": "登录成功",
  "data": {
    "user": {
      "id": "user_123",
      "username": "testuser",
      "points": 100
    },
    "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
  }
}
```

### 获取用户资料
```http
GET /api/auth/profile
Authorization: Bearer <JWT_TOKEN>
```

### 用户登出
```http
POST /api/auth/logout
Authorization: Bearer <JWT_TOKEN>
```

## 💰 积分系统接口

### 获取积分信息
```http
GET /api/points
Authorization: Bearer <JWT_TOKEN>
```

### 积分交易记录
```http
GET /api/points/transactions
Authorization: Bearer <JWT_TOKEN>
```

### 执行积分消费 (系统内部)
```http
POST /api/points/consume
Authorization: Bearer <JWT_TOKEN>
Content-Type: application/json

{
  "amount": 10,
  "reason": "AI分析消费"
}
```

## ✅ 签到系统接口

### 获取签到状态
```http
GET /api/checkin/status
Authorization: Bearer <JWT_TOKEN>
```

**响应示例**:
```json
{
  "success": true,
  "data": {
    "hasCheckedIn": false,
    "consecutiveDays": 5,
    "totalCheckins": 30,
    "nextReward": 10
  }
}
```

### 执行签到
```http
POST /api/checkin
Authorization: Bearer <JWT_TOKEN>
```

## 🔮 奇门遁甲接口

### 奇门遁甲排盘
```http
POST /api/qimen/paipan
Authorization: Bearer <JWT_TOKEN>
Content-Type: application/json

{
  "question": "事业发展如何？",
  "category": "事业",
  "datetime": "2024-08-03T10:30:00.000Z",  // 可选，默认当前时间
  "location": {                            // 可选，默认北京
    "longitude": 116.4074,
    "latitude": 39.9042
  }
}
```

**响应示例**:
```json
{
  "success": true,
  "data": {
    "paipanData": {
      "year": "甲辰",
      "month": "壬申",
      "day": "辛卯",
      "hour": "癸巳",
      "ju": "阳遁五局",
      "zhifu": "天心",
      "zhishi": "开门"
    },
    "question": "事业发展如何？",
    "category": "事业",
    "timestamp": "2024-08-03T10:30:00.000Z"
  }
}
```

### AI智能分析 - 简单模式
```http
POST /api/analysis/qimen
Authorization: Bearer <JWT_TOKEN>
Content-Type: application/json

{
  "question": "事业发展如何？",
  "paipanData": { /* 排盘数据 */ },
  "mode": "simple"
}
```

### AI智能分析 - 详细模式
```http
POST /api/analysis/qimen
Authorization: Bearer <JWT_TOKEN>
Content-Type: application/json

{
  "question": "事业发展如何？",
  "paipanData": { /* 排盘数据 */ },
  "mode": "detailed"
}
```

### AI智能分析 - 流式模式
```http
POST /api/analysis/qimen/stream
Authorization: Bearer <JWT_TOKEN>
Content-Type: application/json

{
  "question": "事业发展如何？",
  "paipanData": { /* 排盘数据 */ }
}
```

**流式响应**: 返回 `text/event-stream` 格式的实时数据流

## 📚 历史记录接口

### 获取历史记录列表
```http
GET /api/qimen/history?page=1&limit=20&search=关键词
Authorization: Bearer <JWT_TOKEN>
```

**响应示例**:
```json
{
  "success": true,
  "data": {
    "records": [
      {
        "id": "record_123",
        "question": "事业发展如何？",
        "analysis": "分析结果摘要...",
        "tags": "事业,发展",
        "createdAt": "2024-08-03T10:30:00.000Z"
      }
    ],
    "pagination": {
      "page": 1,
      "limit": 20,
      "total": 50,
      "hasNext": true
    }
  }
}
```

### 获取历史记录详情
```http
GET /api/qimen/history/:id
Authorization: Bearer <JWT_TOKEN>
```

### 删除历史记录
```http
DELETE /api/qimen/history/:id
Authorization: Bearer <JWT_TOKEN>
```

## ⭐ 收藏夹接口

### 获取收藏列表
```http
GET /api/qimen/favorites?page=1&limit=20
Authorization: Bearer <JWT_TOKEN>
```

**响应示例**:
```json
{
  "success": true,
  "data": {
    "favorites": [
      {
        "id": "fav_123",
        "recordId": "record_123",
        "note": "重要的事业分析",
        "createdAt": "2024-08-03T11:00:00.000Z",
        "record": {
          "question": "事业发展如何？",
          "analysis": "分析结果...",
          "paipanData": { /* 排盘数据 */ }
        }
      }
    ],
    "pagination": {
      "page": 1,
      "limit": 20,
      "total": 10
    }
  }
}
```

### 添加收藏
```http
POST /api/qimen/favorites
Authorization: Bearer <JWT_TOKEN>
Content-Type: application/json

{
  "recordId": "record_123",
  "note": "重要的事业分析"
}
```

### 更新收藏备注
```http
PUT /api/qimen/favorites/:recordId
Authorization: Bearer <JWT_TOKEN>
Content-Type: application/json

{
  "note": "更新后的备注内容"
}
```

### 取消收藏
```http
DELETE /api/qimen/favorites/:recordId
Authorization: Bearer <JWT_TOKEN>
```

## 🎫 邀请码系统接口

### 生成邀请码 (管理员)
```http
POST /api/invite-codes/generate
Authorization: Bearer <ADMIN_JWT_TOKEN>
Content-Type: application/json

{
  "count": 10,
  "description": "推广活动邀请码"
}
```

### 验证邀请码
```http
POST /api/invite-codes/validate
Content-Type: application/json

{
  "code": "INVITE123"
}
```

### 获取邀请码列表 (管理员)
```http
GET /api/invite-codes?page=1&limit=20&status=unused
Authorization: Bearer <ADMIN_JWT_TOKEN>
```

## 🏥 健康检查接口

### 系统健康检查
```http
GET /health
```

**响应示例**:
```json
{
  "status": "healthy",
  "timestamp": "2024-08-03T10:30:00.000Z",
  "uptime": 3600,
  "version": "1.0.0"
}
```

### 数据库健康检查
```http
GET /api/health/db
Authorization: Bearer <JWT_TOKEN>
```

### AI服务健康检查
```http
GET /api/health/ai
Authorization: Bearer <JWT_TOKEN>
```

## 🔧 MCP服务接口 (内部)

### MCP工具调用
```http
POST /api/mcp/tools/call
Authorization: Bearer <JWT_TOKEN>
Content-Type: application/json

{
  "toolName": "qimen_analysis",
  "arguments": {
    "question": "事业发展如何？",
    "paipanData": { /* 排盘数据 */ }
  }
}
```

## 📊 API错误处理

### 标准错误响应格式
```json
{
  "success": false,
  "error": {
    "code": "VALIDATION_ERROR",
    "message": "输入参数验证失败",
    "details": {
      "field": "username",
      "reason": "用户名已存在"
    }
  },
  "timestamp": "2024-08-03T10:30:00.000Z"
}
```

### 常见错误码
- `VALIDATION_ERROR`: 输入验证失败
- `UNAUTHORIZED`: 未授权访问
- `FORBIDDEN`: 权限不足
- `NOT_FOUND`: 资源不存在
- `RATE_LIMITED`: 请求频率限制
- `INSUFFICIENT_POINTS`: 积分不足
- `AI_SERVICE_ERROR`: AI服务错误
- `DATABASE_ERROR`: 数据库错误

## 🛡️ API安全机制

### JWT认证
- **认证头**: `Authorization: Bearer <token>`
- **过期时间**: 7天
- **刷新机制**: 重新登录获取新token

### 限流策略
- **通用API**: 100次/分钟
- **AI分析**: 10次/分钟
- **注册登录**: 5次/分钟
- **文件上传**: 20次/小时

### 输入验证
- 所有接口使用Joi schema验证
- SQL注入防护 (Prisma ORM)
- XSS攻击防护
- CSRF保护

## 🔍 API测试示例

### 使用curl测试
```bash
# 用户注册
curl -X POST http://localhost:3001/api/auth/register \
  -H "Content-Type: application/json" \
  -d '{"username":"testuser","email":"test@example.com","password":"123456"}'

# 用户登录
curl -X POST http://localhost:3001/api/auth/login \
  -H "Content-Type: application/json" \
  -d '{"usernameOrEmail":"testuser","password":"123456"}'

# 奇门遁甲排盘 (需要token)
curl -X POST http://localhost:3001/api/qimen/paipan \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer YOUR_TOKEN" \
  -d '{"question":"事业发展如何？","category":"事业"}'

# 获取历史记录
curl -X GET "http://localhost:3001/api/qimen/history?page=1&limit=10" \
  -H "Authorization: Bearer YOUR_TOKEN"
```

### 前端API调用示例 (Vue)
```javascript
// apps/frontend-vue/src/utils/qimenApi.js
import { apiClient } from './api.js';

// 奇门排盘
export const qimenPaipan = async (question, category) => {
  const response = await apiClient.post('/api/qimen/paipan', {
    question,
    category
  });
  return response.data;
};

// AI分析
export const qimenAnalysis = async (question, paipanData, mode = 'simple') => {
  const response = await apiClient.post('/api/analysis/qimen', {
    question,
    paipanData,
    mode
  });
  return response.data;
};

// 获取历史记录
export const getHistory = async (page = 1, limit = 20, search = '') => {
  const response = await apiClient.get('/api/qimen/history', {
    params: { page, limit, search }
  });
  return response.data;
};
```

### 前端API调用示例 (React)
```javascript
// apps/frontend-react/src/services/api.js
import axios from 'axios';

// 配置API客户端
const apiClient = axios.create({
  baseURL: process.env.NODE_ENV === 'production' 
    ? 'http://101.201.148.8:3001' 
    : '/api',
  timeout: 30000
});

// 添加收藏
export const addFavorite = async (recordId, note = '') => {
  const response = await apiClient.post('/api/qimen/favorites', {
    recordId,
    note
  });
  return response.data;
};

// 获取收藏列表
export const getFavorites = async (page = 1, limit = 20) => {
  const response = await apiClient.get('/api/qimen/favorites', {
    params: { page, limit }
  });
  return response.data;
};
```

## 📈 API性能监控

### 响应时间基准
- **认证接口**: < 200ms
- **奇门排盘**: < 500ms
- **简单AI分析**: < 3s
- **详细AI分析**: < 10s
- **数据查询**: < 100ms

### 监控指标
- 请求量 (QPS)
- 响应时间 (RT)
- 错误率 (Error Rate)
- 可用性 (Availability)

### 日志格式
```json
{
  "timestamp": "2024-08-03T10:30:00.000Z",
  "method": "POST",
  "url": "/api/qimen/paipan",
  "userId": "user_123",
  "duration": 456,
  "status": 200,
  "userAgent": "Mozilla/5.0..."
}
```

---

## 📋 API开发规范

### 接口命名规范
- 使用RESTful风格
- 资源名使用复数形式
- 动作使用HTTP动词表示
- 嵌套资源不超过3层

### 响应格式规范
- 统一使用 `{ success, data, error }` 格式
- 分页使用 `pagination` 对象
- 时间统一使用ISO 8601格式
- 错误信息提供详细的错误码和描述

### 新接口开发流程
1. 在 [apps/backend/src/routes/](mdc:apps/backend/src/routes/) 中添加路由
2. 在 [apps/backend/src/services/](mdc:apps/backend/src/services/) 中实现业务逻辑  
3. 更新本文档中的接口说明
4. 编写接口测试用例
5. 更新前端API客户端代码


## 📝 测试用例

参考 [backend/AUTH_SYSTEM_README.md](mdc:backend/AUTH_SYSTEM_README.md) 中的测试示例。
