---
description:
globs:
alwaysApply: false
---
# 丁未奇门遁甲系统 - 项目架构规则

## 🏗️ 统一架构设计

本项目已经过重构，**只使用一个统一的入口点**：[app.js](mdc:backend/app.js)

### ⚠️ 重要提醒
- **已删除重复文件**: `server.js`, `index.js`, `simple-server.js` 不再存在
- **唯一入口**: [app.js](mdc:backend/app.js) 是生产和开发环境的唯一服务器文件
- **模块化架构**: 所有功能都通过 [src/](mdc:backend/src) 目录下的模块实现

## 📁 核心架构

```
backend/
├── app.js                    # 🚀 统一入口点 (唯一服务器文件)
├── src/                      # 📦 模块化组件目录
│   ├── config/               # ⚙️ 配置管理
│   │   └── AppConfig.js      # 环境变量和配置
│   ├── services/             # 🔧 业务服务层
│   │   ├── PointsService.js  # 💰 积分系统服务
│   │   └── AIService.js      # 🤖 AI分析服务
│   ├── middleware/           # 🛡️ 中间件层
│   │   └── index.js          # 认证、限流、安全中间件
│   ├── database/             # 🗄️ 数据库层
│   │   └── init.js           # 数据库初始化
│   └── routes/               # 🛣️ 路由模块
├── prisma/                   # 📊 数据库模式
└── config.env               # 🔧 环境配置
```

## 🚀 启动方式

### 开发环境
```bash
cd backend
node app.js
```

### 生产环境
```bash
NODE_ENV=production node app.js
```

### 使用启动脚本
```bash
./backend/start.sh              # 简单启动
./backend/start-server.sh       # 守护进程模式
./backend/start-auth-server.sh  # 认证系统启动
```

## 🎯 核心功能模块

1. **用户认证系统** - JWT token认证
2. **积分管理系统** - 事务安全的积分操作
3. **签到系统** - 每日签到奖励
4. **奇门遁甲排盘** - 传统排盘算法
5. **AI智能分析** - 多策略AI分析（简单/详细/流式）

## 📋 配置文件说明

- [config.env](mdc:backend/config.env) - 开发环境配置
- [config.prod.env](mdc:backend/config.prod.env) - 生产环境配置
- [package.json](mdc:backend/package.json) - 依赖管理

## 🔒 安全特性

- JWT认证中间件统一管理
- 差异化API限流策略
- 输入验证和安全过滤
- 错误处理和日志记录
