# 丁未奇门遁甲系统 - 项目架构规则 (2024优化版)

## 🏗️ 优化后的项目架构

本项目已完成**全面架构重构**，采用现代化模块分离设计：

### ⚠️ 重要更新
- **新架构**: 采用 `apps/` 目录分离前后端应用
- **统一入口**: [apps/backend/app.js](mdc:apps/backend/app.js) 是唯一后端入口文件
- **双前端支持**: Vue.js 和 React 两个前端版本并存
- **配置集中**: 所有配置文件移至 [config/](mdc:config) 目录
- **文档完善**: 所有文档移至 [docs/](mdc:docs) 目录

## 📁 核心架构

```
yunque-qimen/
├── apps/                           # 🚀 应用程序目录
│   ├── backend/                    # 🔧 后端应用
│   │   ├── app.js                  # 统一入口点 (唯一服务器文件)
│   │   ├── src/                    # 📦 模块化组件目录
│   │   │   ├── config/             # ⚙️ 配置管理
│   │   │   │   └── AppConfig.js    # 环境变量和配置
│   │   │   ├── services/           # 🔧 业务服务层
│   │   │   │   ├── PointsService.js    # 💰 积分系统服务
│   │   │   │   ├── AIService.js        # 🤖 AI分析服务
│   │   │   │   └── InviteCodeService.js # 🎫 邀请码服务
│   │   │   ├── middleware/         # 🛡️ 中间件层
│   │   │   │   └── index.js        # 认证、限流、安全中间件
│   │   │   ├── database/           # 🗄️ 数据库层
│   │   │   │   └── init.js         # 数据库初始化
│   │   │   ├── routes/             # 🛣️ 路由模块
│   │   │   │   ├── qimen.js        # 奇门遁甲路由
│   │   │   │   └── analysis.js     # AI分析路由
│   │   │   └── agents/             # 🤖 智能代理
│   │   │       └── QimenAgent.js   # 奇门遁甲AI代理
│   │   ├── prisma/                 # 📊 数据库模式
│   │   │   └── schema.prisma       # 数据库模式定义
│   │   └── package.json            # 依赖管理
│   ├── frontend-vue/               # 🎨 Vue.js前端
│   │   ├── src/                    # Vue.js源代码
│   │   ├── ios/                    # iOS移动端
│   │   └── package.json            # Vue前端依赖
│   └── frontend-react/             # ⚛️ React前端
│       ├── src/                    # React源代码
│       ├── android/                # Android移动端
│       ├── ios/                    # iOS移动端
│       └── package.json            # React前端依赖
├── config/                         # ⚙️ 配置文件目录
│   ├── deploy.sh                   # 标准部署脚本
│   ├── deploy-fix.sh               # 修复版部署脚本
│   └── docker-compose.yml          # Docker配置
├── docs/                           # 📚 项目文档目录
│   ├── README.md                   # 项目说明
│   ├── PROJECT_STRUCTURE.md        # 项目结构文档
│   └── FEATURE_SUMMARY.md          # 功能总结
└── start-dev.sh                    # 🚀 开发环境快速启动脚本
```

## 🚀 启动方式

### 推荐：使用统一启动脚本
```bash
# 安装所有依赖
./start-dev.sh install

# 启动开发环境（交互式选择）
./start-dev.sh start
```

### 手动启动各应用

#### 后端启动
```bash
cd apps/backend
node app.js                         # 开发环境
NODE_ENV=production node app.js     # 生产环境
```

#### Vue前端启动
```bash
cd apps/frontend-vue
npm run dev                         # 开发环境
npm run build                       # 生产构建
```

#### React前端启动
```bash
cd apps/frontend-react
npm run dev                         # 开发环境 
npm run build                       # 生产构建
```

## 🎯 核心功能模块

1. **用户认证系统** - JWT token认证，邀请码注册
2. **积分管理系统** - 事务安全的积分操作，签到奖励
3. **奇门遁甲排盘** - 传统排盘算法实现
4. **AI智能分析** - 多策略AI分析（简单/详细/流式）
5. **历史记录系统** - 自动保存，智能搜索
6. **收藏夹功能** - 重要分析收藏管理
7. **移动端支持** - iOS/Android原生应用

## 📋 重要配置文件

### 后端配置
- [apps/backend/app.js](mdc:apps/backend/app.js) - 统一应用入口
- [apps/backend/src/config/AppConfig.js](mdc:apps/backend/src/config/AppConfig.js) - 应用配置管理
- [apps/backend/prisma/schema.prisma](mdc:apps/backend/prisma/schema.prisma) - 数据库模式
- [apps/backend/package.json](mdc:apps/backend/package.json) - 后端依赖管理

### 前端配置
- [apps/frontend-vue/package.json](mdc:apps/frontend-vue/package.json) - Vue前端依赖
- [apps/frontend-react/package.json](mdc:apps/frontend-react/package.json) - React前端依赖
- [apps/frontend-vue/capacitor.config.ts](mdc:apps/frontend-vue/capacitor.config.ts) - Vue移动端配置
- [apps/frontend-react/capacitor.config.ts](mdc:apps/frontend-react/capacitor.config.ts) - React移动端配置

### 部署配置
- [config/deploy.sh](mdc:config/deploy.sh) - 标准部署脚本
- [config/deploy-fix.sh](mdc:config/deploy-fix.sh) - 修复版部署脚本
- [config/docker-compose.yml](mdc:config/docker-compose.yml) - Docker容器配置

## 🔒 安全特性

- JWT认证中间件统一管理
- 差异化API限流策略  
- 输入验证和安全过滤
- 错误处理和日志记录
- 邀请码注册控制
- 用户权限隔离

## 📱 移动端支持

### Vue前端移动端
- **平台**: iOS + Android
- **技术**: Capacitor 7.x
- **构建**: `cd apps/frontend-vue && npm run build:mobile`

### React前端移动端
- **平台**: iOS + Android  
- **技术**: Capacitor 6.x
- **构建**: `cd apps/frontend-react && npm run build:mobile`

## 🎨 开发规范

### 新功能开发
- 后端功能在 [apps/backend/src/](mdc:apps/backend/src) 目录下模块化开发
- 路由文件放在 [apps/backend/src/routes/](mdc:apps/backend/src/routes)
- 服务逻辑放在 [apps/backend/src/services/](mdc:apps/backend/src/services)
- 前端功能分别在两个前端项目中实现

### 代码组织
- **单一入口**: 后端只使用 `apps/backend/app.js`
- **模块分离**: 前后端完全独立，可单独部署
- **配置集中**: 所有环境配置统一管理
- **文档同步**: 重要变更及时更新文档
