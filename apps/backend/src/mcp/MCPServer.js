import { QimenTools } from './QimenTools.js';
import { Server } from 'node:http';

export class MCPServer {
  constructor() {
    this.port = process.env.MCP_SERVER_PORT || 3002;
    this.name = process.env.MCP_SERVER_NAME || 'qimen-tools';
    this.tools = new QimenTools();
    this.server = null;
    this.isRunning = false;
  }

  async start() {
    try {
      console.log(`üîå ÂêØÂä®MCPÊúçÂä°Âô®: ${this.name}`);
      
      // ÂàùÂßãÂåñÂ∑•ÂÖ∑ÈõÜ
      await this.tools.initialize();
      
      // ÂàõÂª∫HTTPÊúçÂä°Âô®
      this.server = new Server(this.handleRequest.bind(this));
      
      // ÂêØÂä®ÊúçÂä°Âô®
      this.server.listen(this.port, () => {
        this.isRunning = true;
        console.log(`‚úÖ MCPÊúçÂä°Âô®ËøêË°åÂú®Á´ØÂè£ ${this.port}`);
      });
      
      // ÈîôËØØÂ§ÑÁêÜ
      this.server.on('error', (error) => {
        console.error('‚ùå MCPÊúçÂä°Âô®ÈîôËØØ:', error);
        this.isRunning = false;
      });
      
    } catch (error) {
      console.error('‚ùå MCPÊúçÂä°Âô®ÂêØÂä®Â§±Ë¥•:', error);
      throw error;
    }
  }

  async handleRequest(req, res) {
    // ËÆæÁΩÆCORSÂ§¥
    res.setHeader('Access-Control-Allow-Origin', '*');
    res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');
    res.setHeader('Access-Control-Allow-Headers', 'Content-Type');
    
    // Â§ÑÁêÜOPTIONSËØ∑Ê±Ç
    if (req.method === 'OPTIONS') {
      res.writeHead(200);
      res.end();
      return;
    }
    
    try {
      const url = new URL(req.url, `http://localhost:${this.port}`);
      const path = url.pathname;
      
      // Ë∑ØÁî±Â§ÑÁêÜ
      if (path === '/tools' && req.method === 'GET') {
        await this.handleGetTools(req, res);
      } else if (path === '/call' && req.method === 'POST') {
        await this.handleToolCall(req, res);
      } else if (path === '/status' && req.method === 'GET') {
        await this.handleStatus(req, res);
      } else {
        res.writeHead(404, { 'Content-Type': 'application/json' });
        res.end(JSON.stringify({ error: 'Not Found', path }));
      }
      
    } catch (error) {
      console.error('MCPËØ∑Ê±ÇÂ§ÑÁêÜÈîôËØØ:', error);
      res.writeHead(500, { 'Content-Type': 'application/json' });
      res.end(JSON.stringify({ 
        error: 'Internal Server Error', 
        message: error.message 
      }));
    }
  }

  async handleGetTools(req, res) {
    try {
      const tools = Array.from(this.tools.tools.entries()).map(([name, tool]) => ({
        name,
        description: tool.description,
        parameters: this.getToolParameters(name)
      }));
      
      res.writeHead(200, { 'Content-Type': 'application/json' });
      res.end(JSON.stringify({
        server: this.name,
        tools,
        total: tools.length
      }));
      
    } catch (error) {
      console.error('Ëé∑ÂèñÂ∑•ÂÖ∑ÂàóË°®ÈîôËØØ:', error);
      res.writeHead(500, { 'Content-Type': 'application/json' });
      res.end(JSON.stringify({ error: error.message }));
    }
  }

  async handleToolCall(req, res) {
    try {
      const body = await this.readRequestBody(req);
      const { tool, parameters } = JSON.parse(body);
      
      if (!tool) {
        res.writeHead(400, { 'Content-Type': 'application/json' });
        res.end(JSON.stringify({ error: 'Áº∫Â∞ëÂ∑•ÂÖ∑ÂêçÁß∞' }));
        return;
      }
      
      // Ë∞ÉÁî®MCPÂ∑•ÂÖ∑
      
      const startTime = Date.now();
      const result = await this.tools.callTool(tool, parameters || {});
      const executionTime = Date.now() - startTime;
      
      res.writeHead(200, { 'Content-Type': 'application/json' });
      res.end(JSON.stringify({
        success: true,
        tool,
        result,
        executionTime,
        timestamp: new Date().toISOString()
      }));
      
    } catch (error) {
      console.error('Â∑•ÂÖ∑Ë∞ÉÁî®ÈîôËØØ:', error);
      res.writeHead(500, { 'Content-Type': 'application/json' });
      res.end(JSON.stringify({ 
        error: 'Â∑•ÂÖ∑Ë∞ÉÁî®Â§±Ë¥•', 
        message: error.message 
      }));
    }
  }

  async handleStatus(req, res) {
    try {
      const status = {
        server: this.name,
        port: this.port,
        running: this.isRunning,
        tools: {
          total: this.tools.tools.size,
          initialized: this.tools.isInitialized,
          available: Array.from(this.tools.tools.keys())
        },
        uptime: process.uptime(),
        timestamp: new Date().toISOString()
      };
      
      res.writeHead(200, { 'Content-Type': 'application/json' });
      res.end(JSON.stringify(status));
      
    } catch (error) {
      console.error('Ëé∑ÂèñÁä∂ÊÄÅÈîôËØØ:', error);
      res.writeHead(500, { 'Content-Type': 'application/json' });
      res.end(JSON.stringify({ error: error.message }));
    }
  }

  getToolParameters(toolName) {
    // ËøîÂõûÊØè‰∏™Â∑•ÂÖ∑ÁöÑÂèÇÊï∞ÂÆö‰πâ
    const parameterDefinitions = {
      'query_symbol_meaning': {
        type: { type: 'string', required: true, description: 'Á¨¶Âè∑Á±ªÂûã' },
        name: { type: 'string', required: true, description: 'Á¨¶Âè∑ÂêçÁß∞' }
      },
      'search_combinations': {
        elements: { type: 'object', required: true, description: 'ÂÖÉÁ¥†ÁªÑÂêà' },
        context: { type: 'string', required: false, description: 'Â∫îÁî®ËØ≠Â¢É' }
      },
      'calculate_wuxing': {
        element1: { type: 'string', required: true, description: 'Á¨¨‰∏Ä‰∏™‰∫îË°åÂÖÉÁ¥†' },
        element2: { type: 'string', required: true, description: 'Á¨¨‰∫å‰∏™‰∫îË°åÂÖÉÁ¥†' }
      },
      'find_similar_cases': {
        question: { type: 'string', required: true, description: 'ÈóÆÈ¢òÂÜÖÂÆπ' },
        paipanData: { type: 'object', required: false, description: 'ÊéíÁõòÊï∞ÊçÆ' },
        limit: { type: 'number', required: false, description: 'ËøîÂõûÊï∞ÈáèÈôêÂà∂' }
      },
      'get_time_energy': {
        year: { type: 'number', required: true, description: 'Âπ¥‰ªΩ' },
        month: { type: 'number', required: true, description: 'Êúà‰ªΩ' },
        day: { type: 'number', required: true, description: 'Êó•Êúü' },
        hour: { type: 'number', required: true, description: 'Â∞èÊó∂' }
      }
    };
    
    return parameterDefinitions[toolName] || {};
  }

  async readRequestBody(req) {
    return new Promise((resolve, reject) => {
      let body = '';
      req.on('data', chunk => {
        body += chunk.toString();
      });
      req.on('end', () => {
        resolve(body);
      });
      req.on('error', reject);
    });
  }

  async stop() {
    if (this.server && this.isRunning) {
      this.server.close(() => {
        this.isRunning = false;
        console.log('üîå MCPÊúçÂä°Âô®Â∑≤ÂÖ≥Èó≠');
      });
    }
  }

  // ÊµãËØïÂ∑•ÂÖ∑Ë∞ÉÁî®
  async testTool(toolName, parameters) {
    try {
      console.log(`üß™ ÊµãËØïÂ∑•ÂÖ∑: ${toolName}`);
      const result = await this.tools.callTool(toolName, parameters);
      console.log('‚úÖ ÊµãËØïÁªìÊûú:', result);
      return result;
    } catch (error) {
      console.error('‚ùå ÊµãËØïÂ§±Ë¥•:', error);
      throw error;
    }
  }

  // Ëé∑ÂèñÂ∑•ÂÖ∑‰ΩøÁî®ÁªüËÆ°
  async getToolStats() {
    try {
      const { getDatabase } = await import('../database/init.js');
      const db = await getDatabase();
      
      const stats = await db.all(`
        SELECT 
          tool_name,
          COUNT(*) as call_count,
          AVG(execution_time) as avg_execution_time,
          SUM(CASE WHEN success = 1 THEN 1 ELSE 0 END) as success_count,
          SUM(CASE WHEN success = 0 THEN 1 ELSE 0 END) as error_count
        FROM mcp_tool_logs 
        GROUP BY tool_name
        ORDER BY call_count DESC
      `);
      
      return stats.map(s => ({
        toolName: s.tool_name,
        callCount: s.call_count,
        avgExecutionTime: Math.round(s.avg_execution_time),
        successCount: s.success_count,
        errorCount: s.error_count,
        successRate: Math.round((s.success_count / s.call_count) * 100)
      }));
      
    } catch (error) {
      console.error('Ëé∑ÂèñÂ∑•ÂÖ∑ÁªüËÆ°Â§±Ë¥•:', error);
      return [];
    }
  }
} 